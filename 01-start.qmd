---
title: "Getting Started"
format:
  html:
    link-external-newwindow: true
---

<head>

```{=html}
<script src="https://kit.fontawesome.com/ece750edd7.js" crossorigin="anonymous"></script>
```
</head>

```{r global_options, include=FALSE}
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
```

------------------------------------------------------------------------

In this section you will learn how to log into the WCB's bifx servers, and run some simple commands. You will also learn how to find out about commands, and how to use bash efficiently.

### Starting a Terminal and logging in to the remote server

------------------------------------------------------------------------

The process of starting a terminal depends on the operating system that you are using:

-   On Mac OS X or Ubuntu Linux, simply open the 'Terminal' application
-   On Windows, you can install [MobaXTerm](https://mobaxterm.mobatek.net/)

In order to log in to the bifx-core2 server, you must first connect to the [Edinburgh University VPN](https://www.ed.ac.uk/information-services/computing/desktop-personal/vpn/vpn-service-using).

Once logged in to the VPN, you can log in to the server by typing the following command in the Terminal, substituting \[USERNAME\] for your account username:

```{r eval=F}
$ ssh [USERNAME]@bifx-core2.bio.ed.ac.uk
```

If you are using MobaXTerm, an alternative way of logging into the server is shown in the [MobaXTerm demo](https://mobaxterm.mobatek.net/demo.html).

Once you have typed in your password, you should see some welcome text and a prompt that looks something like this:

```{r eval=F}
[USERNAME]@bifx-core2:~$
```

This prompt shows you that you are logged in to the *bifx-core2* server, and that you are in your home directory (which is referred to using the *\~* character on Linux systems).

### Running basic commands in bash

------------------------------------------------------------------------

::: key-points
<h2><i class="fas fa-thumbtack"></i> Key Points</h2>

-   Commands in bash can be categorised as either:
    -   built in commands (or *builtins*), which are part of the bash shell, or
    -   installed programs, which could be either the basic GNU core utilities (or *coreutils*), included in most Linux distributions, or other programs, such as specialised bioinformatics tools
:::

In order to run a command in bash you type the command and then press the return key to execute it. For example, try typing `date` at the prompt and pressing return. You should get something like this:

```{bash eval=F}
[USERNAME]@bifx-core2:~$ date
Wed 31 Jan 09:21:43 GMT 2024
[USERNAME]@bifx-core2:~$ 
```

As you can see, the output of the `date` command is printed on the command line, and then another prompt is shown.

As well as the command name, a command can include 'options' and 'arguments'. For example, try typing `date -d '25 Dec' +%j` at the command line:

```{bash eval=F}
[USERNAME]@bifx-core2:~$ date -d '25 Dec' +%j
360
[USERNAME]@bifx-core2:~$ 
```

In this example, the command includes the following elements:

-   the command name `date`, which always comes first
-   one option `-d '25 Dec'`, which has a name `-d` (option names always start with at least one '-'), and a value `'25 Dec'`
-   one argument `+%j`

#### Options and arguments

Options always have a name, but do not always need to have an associated value. Options that don't have a value are called flags, and are often used as switches for different kinds of functionality. Unlike options, arguments don't have names. Instead they are identified by their position.

In general, the values of options and arguments are text strings, which are passed directly to the command. If a value contains spaces, you can surround it with quote marks, as in the example above, so that it is recognised as a single value. You can also use the output of one command as an argument to another by enclosing it in backticks \`\`\`, as in the following example:

```{bash eval=F}
[USERNAME]@bifx-core2:~$ echo date
date
[USERNAME]@bifx-core2:~$ echo `date`
Sat 14 Nov 11:25:11 GMT 2020
[USERNAME]@bifx-core2:~$ 
```

*Note:* The above example uses the `echo` command, which outputs the text value of its arguments.

### Finding out about bash commands

------------------------------------------------------------------------

::: key-points
<h2><i class="fas fa-thumbtack"></i> Key Points</h2>

-   The bash shell provides a number of different ways to access information about commands, in particular:
    -   The `man` command
    -   The `info` command
    -   `--help` and `-h` flags
:::

While the use of options and arguments makes commands more powerful and flexible, they can be difficult to remember, and can vary between different versions of the command. For this reason, it is useful to be able to find information about commands easily.

#### The `man` command

This displays a short manual page for a single command. To see the manual page for the *date* command simply type `man date`.

-   You can scroll through the man page using <kbd>space</kbd>, and type <kbd>q</kbd> to quit
    -   You can learn more about different commands by typing <kbd>h</kbd>
-   To learn about bash builtins, type `man builtins`

#### The `info` command

This displays a more comprehensive hyperlinked manual, which provides detailed information about the GNU coreutils. Simply type `info` to see the info documentation, and type <kbd>H</kbd> in info to find out how to navigate the documentation. Press <kbd>q</kbd> to quit.

#### `--help` and `-h` flags

Some programs may not have any documentation that is accessible using the `man` or `info` commands. In this case, they may follow the convention of including `--help` or `-h` flags, which will show some usage information. As an example, we can try to find help information about `bedtools`, which is a well known bioinformatics tool that we will look at later in the course:

```{bash eval=F}
[USERNAME]@bifx-core2:~$ man bedtools
No manual entry for bedtools
See 'man 7 undocumented' for help when manual pages are not available.
[USERNAME]@bifx-core2:~$ info bedtools
info: No menu item 'bedtools' in node '(dir)Top'
[USERNAME]@bifx-core2:~$ bedtools --help
bedtools is a powerful toolset for genome arithmetic.

Version:   v2.27.0
...
```

::: challenge
<h2><i class="fas fa-pencil-alt"></i> Challenge:</h2>

We saw the command "date -d '25 Dec' +%j" in the previous section. Can you use the `man` command to explain what it does?

<details>

<summary>Solution</summary>

::: solution
<h2><i class="far fa-eye"></i> Solution:</h2>

Run `man date`, and look for the `-d` flag. The documentation explains that `-d` tells date to display the time described by the value of the option, rather than the current time. Now look up `%j` in the documentation. The relevant line says '%j day of year (001..366)'. So the command tells you which day of the year it will be on the 25th of December.
:::

</details>
:::

<br>

### Using bash efficiently

------------------------------------------------------------------------

<br>

::: key-points
<h2><i class="fas fa-thumbtack"></i> Key Points</h2>

-   Working with long commands in bash can be laborious, but luckily there are a few tricks that you can use to make things easier. These are:
    -   Keyboard shortcuts
    -   Tab completion
    -   Using the bash history
:::

#### Keyboard shortcuts

By default, bash allows you to use many keyboard shortcuts from the [GNU Emacs](https://www.gnu.org/software/emacs/) editor to work with your commands. These include:

-   <kbd>Ctrl+a</kbd> to move to the beginning of the line
-   <kbd>Ctrl+e</kbd> to move to the end of the line
-   <kbd>Ctrl+k</kbd> to cut the text from the cursor to the end of the line
-   <kbd>Ctrl+y</kbd> to paste text at the cursor

You can also use <kbd>Ctrl+c</kbd> to terminate the command that is currently running and take you back to the command prompt.

#### Tab completion

Tab completion allows you to type part of a command name followed by the <kbd>Tab</kbd> key, which prompts bash to guess the rest of the command name based on the commands that are available on the system.

For instance, if you want to run the *bedtools* command on the server, you can type *bedt* followed by <kbd>Tab</kbd>, and the rest of the command name will be filled in for you.

Typing <kbd>Tab</kbd> once to complete a command name only works if there is only one possible way to complete the name. If there are multiple options and you would like to see them, you can type <kbd>Tab</kbd> twice, and the possible completions will be displayed.

#### Using the bash history

A particularly useful feature of command line shells is the ability to look back at previous commands that you have run. In bash you can access these commands using the *history* command. Typing *history* will show you a numbered list of commands you've run recently. You can also specify the number of previous commands you'd like to see by including it as an argument.

There are a few useful tricks that make it easy to find and run commands that you have run before:

-   Scrolling through the history with the up and down arrows
-   Searching the history with <kbd>Ctrl+r</kbd> (reverse-i-search)
-   Re-running a previously run command with ! followed by the number of the command

::: challenge
<h2><i class="fas fa-pencil-alt"></i> Challenge:</h2>

What are the possible completions of 'bed' on the server?

<details>

<summary>Solution</summary>

::: solution
<h2><i class="far fa-eye"></i> Solution:</h2>

Add the command prompt type `bed` then press <kbd>Tab</kbd> twice. You should see the following:

```{bash eval=F}
[USERNAME]@bifx-core2:~$ bed<Tab><Tab>
bed12ToBed6                   bedExons.pl                   bedRestrictToPositions
bed2gff3.pl                   bed_extend_to.py              bedSort
bed2pos.pl                    bedextract                    bedSpliceSite.pl
bed2region                    bedGeneParts                  bedSplitOnChrom
bed2tag.pl                    bedGraphToBigWig              bed_subtract_basewise.py
bed_bigwig_profile.py         bedInGraph                    bedToBam
bed_build_windows.py          bedIntersect                  bedToBigBed
bedClip                       bed_intersect_basewise.py     bedToExons
bedCombiner.pl                bed_intersect.py              bedToFrames
bedCommonRegions              bedItemOverlapCount           bedToGenePred
bed_complement.py             bedLengthFilter.pl            bedToIgv
bedCons                       bedmap                        bed_to_juncs
bed_count_by_interval.py      bed_merge_overlapping.py      bedtools
bed_count_overlapping.py      bedops                        bedToPsl
bedCoverage                   bedops-starch                 bedToTxEdges
bed_coverage_by_interval.py   bedOrBlocks                   bedUp
bed_coverage.py               bedpeToBam                    bedWeedOverlapping
bed_diff_basewise_summary.py  bed_rand_intersect.py
bedDown                       bedRemoveOverlap
[USERNAME]@bifx-core2:~$
```
:::

</details>
:::

::: challenge
<h2><i class="fas fa-pencil-alt"></i> Challenge:</h2>

Use the history to re-run the `date -d '25 Dec' +%j` command without re-typing it

<details>

<summary>Solution</summary>

::: solution
<h2><i class="far fa-eye"></i> Solution:</h2>

There are three ways to do this: <br> One way would be to press <kbd>Ctrl+r</kbd>, then type `date`, then press <kbd>Ctrl+r</kbd> again repeatedly until you see the command, then press <kbd>Enter</kbd> to run it. <br> Alternatively, you could run the `history` command and look back through the history list to find the command. Then you could type `!` at the command prompt followed by the number of the command in the history. <br> A third way would be to either hit the up arrow or type <kbd>Ctrl+p</kbd> to scroll back through the history until you see the command, then press <kbd>Enter</kbd> to run it.
:::

</details>
:::
